#lang racket
(require r5rs)
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (make-queue) (cons '() '()))
(define (clear q) (set! q (make-queue)))
(define (front-queue queue)
  (car (front-ptr queue)))
(define (empty-queue? queue) (null? (car queue)))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair))
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)))))
(define (delete-queue! queue)
  (set-front-ptr! queue (cdr (front-ptr queue))))

(define N (read))
(define K (read))

(define mem (make-vector 100010 0))
(define q (make-queue))
(insert-queue! q (cons N 0))
(define (BFS)
  (let ((pos (car (front-queue q)))
        (steps (cdr (front-queue q))))
    (if (= pos K)
        (displayln steps)
        (begin (delete-queue! q)
               (vector-set! mem pos 1)
               (let* ((a (+ pos 1))
                      (b (- pos 1))
                      (c (* pos 2))
                      (va (and (> a 0) (< a 100010) (= (vector-ref mem a) 0)))
                      (vb (and (> b 0) (< b 100010) (= (vector-ref mem b) 0)))
                      (vc (and (> c 0) (< c 100010) (= (vector-ref mem c) 0))))
                 (begin (if va (insert-queue! q (cons a (+ steps 1))) (void))
                        (if vb (insert-queue! q (cons b (+ steps 1))) (void))
                        (if vc (insert-queue! q (cons c (+ steps 1))) (void))
                        (BFS)))))))
(BFS)
                      