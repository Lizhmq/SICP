#lang racket
(define (map op lst)
  (if (null? lst)
      '()
      (cons (op (car lst))
            (map op (cdr lst)))))
  
(define (super-map op . w)
(if (null? (car w))
      '()
      (cons (fun op (map car w)) (apply super-map (cons op (map cdr w))))))
(define (fun op lst)
  (if (= (length lst) 1)
      (car lst)
      (op (car lst) (fun op (cdr lst)))))
(define (myloop)
  (let ((a (read))
        (b (read))
        (c (read)))
    (if (eq? a eof)
        (void)
        (begin (displayln (super-map + a b c)) 
               (displayln (super-map (lambda (x y) (+ x (* 2 y) )) a b ))
               (myloop)))))
(myloop)